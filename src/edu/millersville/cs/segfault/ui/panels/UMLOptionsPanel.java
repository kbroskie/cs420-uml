package edu.millersville.cs.segfault.ui.panels;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JPanel;

import edu.millersville.cs.segfault.ui.SelectionMode;
import edu.millersville.cs.segfault.ui.UMLPanel;

/**************************************************************************
 * UMLOptionsPanel is the class responsible for
 * creating a panel containing the different
 * objects and relations a user can select.
 * @author Kimberlyn Broskie
 *************************************************************************/
public class UMLOptionsPanel extends JPanel
							implements ActionListener {

	//*************************************************************************
	// Instance Variables
	//*************************************************************************
	private static final long serialVersionUID = -9118912567292664779L;
	
	private UMLPanel umlPanel;
	
	private static final String optionsPaneSelect = "Select";
	
	//*************************************************************************
	// Constructors	
	//*************************************************************************
	
	/**************************************************************************
	 * Builds a panel to hold the options for various objects and 
	 * relations that can be drawn.
	 * @param umlPanel the panel that will hold UMLOptionsPanel.
	 *************************************************************************/
	 public UMLOptionsPanel (UMLPanel umlPanel) {
		 super();
		 
		 this.umlPanel = umlPanel;
		 
		 // Create the main panel and set the layout.
		 GridBagLayout gridBag = new GridBagLayout();
		 setLayout(gridBag);
		 setBorder(BorderFactory.createLineBorder(Color.BLACK, 1)); 
			   
		 // Set the gridbag options for the options panel.
		 GridBagConstraints optionsConstraints = new GridBagConstraints();
		 optionsConstraints.fill = GridBagConstraints.HORIZONTAL;
		 optionsConstraints.anchor = GridBagConstraints.PAGE_START;
		 optionsConstraints.gridx = 0;
		 optionsConstraints.gridy = 0;
		 optionsConstraints.weighty = 0.5;
	 	 optionsConstraints.insets = new Insets(2,0,0,0);
			   	   
	 	 // Build and add the objects panel
	 	 UMLObjectsPanel objectsPanel = new UMLObjectsPanel(umlPanel);
	 	 gridBag.setConstraints(objectsPanel, optionsConstraints);
	 	 add(objectsPanel);   

	 	 // Build and add the relations panel.
	 	 ++optionsConstraints.gridy;
	 	 UMLRelationsPanel relationsPanel = new UMLRelationsPanel(umlPanel);
		 gridBag.setConstraints(relationsPanel, optionsConstraints);	  
		 add(relationsPanel);
			   
		 // Set the options so the last item appears on the bottom of the panel.
		 ++optionsConstraints.gridy;
		 optionsConstraints.weighty = 1.0;
		 optionsConstraints.anchor = GridBagConstraints.PAGE_END;
		 optionsConstraints.insets = new Insets(2,5,3,5);

		 // Build and add the select button.
		 JButton selectionButton = new JButton(optionsPaneSelect);
		 selectionButton.addActionListener(this);
		 gridBag.setConstraints(selectionButton, optionsConstraints);
		 add(selectionButton);   
	} 

	//*************************************************************************
	// Action Listeners
	//*************************************************************************
	 
	/**************************************************************************
	 * Handles the events generated by the user selecting
	 * a button.
	 * @param se the selected event and source 
	 *************************************************************************/
	public void actionPerformed(ActionEvent se) {
		String selectedCommand = se.getActionCommand();

		if (selectedCommand == optionsPaneSelect ) {
			umlPanel.changeInteractionMode(new SelectionMode(umlPanel));
		}
	} 	 
}
