package edu.millersville.cs.segfault.ui;

import java.awt.Event;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;

import edu.millersville.cs.segfault.model.DrawableType;
import edu.millersville.cs.segfault.model.UMLModel;



public class UMLMenuBar extends JMenuBar 
				implements ActionListener {
	
	private static final long serialVersionUID = 8104072242520475736L;

	// Menu Items
	/**** FILE MENU VARIABLES */
	private static final String fileMenuText = "File";
	private static final String newMenuText = "New";
	private static final String openMenuText = "Open";
	private static final String saveMenuText = "Save";
	private static final String saveAsMenuText = "Save as...";
	private static final String exitMenuText = "Exit";
		
	/**** EDIT MENU VARIABLES */
	private static final String editMenuText = "Edit";
	private static final String undoMenuText = "Undo";
	private static final String redoMenuText = "Redo";
	private static final String selectAllText = "Select/Deselect All";
	
	
	/*
	 * Constructor to build the menu bar.
	 * @param wFrame the frame for the interface
	 */
	public UMLMenuBar (JFrame wFrame, UMLPanel umlPanel) {
		super();
		   
		// Create the sub-menus.
		JMenu fileSubmenu = buildFileMenu();
		JMenu editSubmenu = buildEditMenu();
		   
		// Add the menus to the menu bar.
		this.add(fileSubmenu);
		this.add(editSubmenu);
		   
		// Set the window's menu bar.
		wFrame.setJMenuBar(this);
	}
	

	/*
	 * Builds the edit sub-menu.
	 * @return returns the edit submenu
	 */
	private JMenu buildEditMenu() {
	   // Create the edit submenu items, and add accelerators.
	   JMenu editMenu = new JMenu(editMenuText);
	   
	   JMenuItem undoItem = new JMenuItem(undoMenuText);
	   undoItem.addActionListener(this);
	   undoItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Event.CTRL_MASK));

	   JMenuItem redoItem = new JMenuItem(redoMenuText);
	   redoItem.addActionListener(this);
	   redoItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Event.CTRL_MASK));
	   
	   JMenuItem selectAllItem = new JMenuItem(selectAllText);
	   selectAllItem.addActionListener(this);
	   selectAllItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, Event.CTRL_MASK));
	   
	   // Add the sub-menus to the Edit menu.
	   editMenu.add(undoItem);
	   editMenu.add(redoItem);
	   editMenu.add(selectAllItem);
	   
	   return editMenu;
	}
	
	
	/**
	 * Builds the File menu.
	 * @return returns the file submenu
	 */
	private JMenu buildFileMenu() { 
	   // Create the menu items, adding action listeners and accelerators.
	   JMenu fileMenu = new JMenu(fileMenuText);
	   
	   JMenuItem newItem = new JMenuItem(newMenuText);
	   newItem.addActionListener(this);
	   newItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, Event.CTRL_MASK));
	   
	   JMenuItem openItem = new JMenuItem(openMenuText);
	   openItem.addActionListener(this);
	   openItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, Event.CTRL_MASK));

	   JMenuItem saveItem = new JMenuItem(saveMenuText);
	   saveItem.addActionListener(this);
	   saveItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, Event.CTRL_MASK));
	   
	   JMenuItem saveAsItem = new JMenuItem(saveAsMenuText);
	   saveAsItem.addActionListener(this);

	   JMenuItem exitItem = new JMenuItem(exitMenuText);
	   exitItem.addActionListener(new ExitListener());
	   exitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, Event.CTRL_MASK));

	   // Add the sub-menus to the File menu.
	   fileMenu.add(newItem);
	   fileMenu.add(openItem);
	   fileMenu.add(saveItem);
	   fileMenu.add(saveAsItem);
	   fileMenu.add(exitItem);
	   
	   return fileMenu;
	}
	

	/**
	 * Handles the event generated when the user selects 
	 * the exit option from the File menu.
	 * @param e the event information triggered by selecting the exit option
	 */
	private class ExitListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			System.exit(0);
		}
	}
	
	
	/**
	 * Handles the events generated by the user selecting
	 * a menu option.
	 * @param se the selected event and source 
	 */
	 public void actionPerformed(ActionEvent se) {
		 String selectedCommand = se.getActionCommand();
	 	 	 
		 if (selectedCommand == newMenuText) {
			 umlPanel.changeModel(new UMLModel());
		 }
		 else if (selectedCommand == openMenuText) {
			 umlPanel.load();
		 }
		 else if (selectedCommand == saveMenuText) {
			 umlPanel.save(umlPanel.model().serialize());
		 }
		 else if (selectedCommand == saveAsMenuText) {
			 umlPanel.saveAs(umlPanel.model().serialize());
		 }
		 else if (selectedCommand == undoMenuText) {
			 umlPanel.undo();	
		 }
		 else if (selectedCommand == redoMenuText) {
			 umlPanel.redo();
		 } 
	}
}
