package edu.millersville.cs.segfault.ui;

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;


/**
 * Window is the class responsible for instantiating 
 * and controlling the UML editor window.
 * @author Team Seg Fault
 *
 */
public class Window {
	private static final long serialVersionUID = 1L;
	
	private JFrame windowFrame;
	
	private JPanel optionsPanel;
	private JPanel umlPanel;

	private JMenuBar menuBar;

	private JMenu fileMenu;
	private JMenu editMenu;

	private JMenuItem newItem;
	private JMenuItem openItem;
	private JMenuItem saveItem;
	private JMenuItem exitItem;
	private JMenuItem undoItem;
	private JMenuItem redoItem;
	
	private static final String fileMenuText = "File";
	private static final String newMenuText = "New";
	private static final String openMenuText = "Open";
	private static final String saveMenuText = "Save";
	private static final String exitMenuText = "Exit";
	
	private static final String editMenuText = "Edit";
	private static final String undoMenuText = "Undo";
	private static final String redoMenuText = "Redo";
	
	/**
	 * Constructs the UML window object.
	 */
	private Window() {
	    windowFrame = new JFrame("UML Editor");    
	    windowFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    windowFrame.setLayout(new BorderLayout());
	    
	    // Set the look and feel.
	    if (System.getProperty("mrj.version") != null) {
	    	System.setProperty("apple.laf.useScreenMenuBar", "true");
	    }
	    JFrame.setDefaultLookAndFeelDecorated(true);

	    buildMenuBar(windowFrame);  
	    buildOptionsPanel();
	    buildUMLPanel();
	    
	    windowFrame.add(optionsPanel, BorderLayout.WEST);
	    windowFrame.add(umlPanel, BorderLayout.CENTER);
	    
	    windowFrame.pack();
	    windowFrame.setVisible(true);
	}

	/*
	 * Builds the menu bar.
	 */
	private void buildMenuBar(JFrame windowFrame) {
	   menuBar = new JMenuBar();
	   
	   // Create the sub-menus.
	   buildFileMenu();
	   buildEditMenu();
	   
	   // Add the menus to the menu bar.
	   menuBar.add(fileMenu);
	   menuBar.add(editMenu);
	   
	   // Set the window's menu bar.
	   windowFrame.setJMenuBar(menuBar);
	}

	/**
	 * Builds the File menu and sets the hotkeys.
	 */
	private void buildFileMenu() { 
	   // Create the menu items.
	   fileMenu = new JMenu(fileMenuText);
	   newItem = new JMenuItem(newMenuText);
	   openItem = new JMenuItem(openMenuText);
	   saveItem = new JMenuItem(saveMenuText);
	   exitItem = new JMenuItem(exitMenuText);

	   // Add an action listener for the exit option.
	   exitItem.addActionListener(new ExitListener());

	   // Set the hotkeys for the sub-menu options.
	   fileMenu.setMnemonic(KeyEvent.VK_F);
	   newItem.setMnemonic(KeyEvent.VK_N);
	   openItem.setMnemonic(KeyEvent.VK_O);
	   saveItem.setMnemonic(KeyEvent.VK_S);
	   exitItem.setMnemonic(KeyEvent.VK_X);
	      
	   // Add the sub-menus to the File menu.
	   fileMenu.add(newItem);
	   fileMenu.add(openItem);
	   fileMenu.add(saveItem);
	   fileMenu.add(exitItem);
	}

	/*
	 * Builds the edit sub-menu.
	 */
	private void buildEditMenu() {
	   // Create the menu items.
	   editMenu = new JMenu(editMenuText);
	   undoItem = new JMenuItem(undoMenuText);
	   redoItem = new JMenuItem(redoMenuText);
	   
	   // Set the hotkeys.
	   editMenu.setMnemonic(KeyEvent.VK_E);
	   undoItem.setMnemonic(KeyEvent.VK_Z);
	   exitItem.setMnemonic(KeyEvent.VK_Y);

	   // Add the sub-menus to the Edit menu.
	   editMenu.add(undoItem);
	   editMenu.add(redoItem);
	}

	/**
	 * Creates a panel to place the various UML object selections.
	 */
	private void buildOptionsPanel() {
	   optionsPanel = new JPanel();
	   optionsPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1)); 
	} 

	/**
	 * Adds the UML panel.
	 */
	private void buildUMLPanel() {
		umlPanel = new UMLPanel();
		umlPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
	 }

	/**
	 * Handles the event generated when the user selects 
	 * the exit option from the File menu.
	 */
	private class ExitListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			System.exit(0);
		}
	}
	
	/**
	 * Handles the events generated by the user selecting
	 * a menu option.
	 * @param se the selected event and source 
	 */
	 public void actionPerformed(ActionEvent se) {
		 String selectedCommand = se.getActionCommand();
		 
		 
		 if (selectedCommand == newMenuText) {
			 //umlPanel.changeModel(new UMLModel());
		 }
		 else if (selectedCommand == openMenuText) {
			 // Call to puzzles open method.
		 }
		 else if (selectedCommand == saveMenuText) {
			 // Call to puzzles save method.
		 }
		 else if (selectedCommand == undoMenuText) {
			 //umlPanel.undo();
		 }
		 else if (selectedCommand == redoMenuText) {
			 //umlPanel.redo();
		 }
	 } 
	 

	/*
	 * Creates and shows the UML editor GUI.
	 * @param args are not used
	 */
	public static void main(String[] args) {
	   javax.swing.SwingUtilities.invokeLater(new Runnable() {
		   public void run() {
			   new Window();
		   }
	   }
	   );
	}
}
